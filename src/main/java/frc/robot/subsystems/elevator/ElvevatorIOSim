import com.ctre.phoenix6.hardware.TalonFX;
import com.ctre.phoenix6.sim.TalonFXSimState;
import com.ctre.phoenix6.configs.TalonFXConfiguration;
import edu.wpi.first.wpilibj.RobotBase;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import edu.wpi.first.math.system.plant.DCMotor;
import edu.wpi.first.wpilibj.simulation.DCMotorSim;
import edu.wpi.first.wpilibj.simulation.LinearSystemSim;

public class ElvevatorIOSim implements ElevatorIO{
    private final DCMotorSim leftExtensionMotor = new DCMotorSim(DCMotor.getKrakenX60Foc(1), 1, 0.001);
    private final DCMotorSim rightExtensionMotor = new DCMotorSim(DCMotor.getKrakenX60Foc(1), 1, 0.001);

    private static final double LOOP_PERIOD_SECS = 0.02;

    private double leftExtensionVoltage = = 0.0;
    private double rightExtensionVoltage = = 0.0;

    @Override
    public void updateInputs(ElevatorIOInputs inputs){
        leftExtensionMotor.update(LOOP_PERIOD_SECS);
        rightExtensionMotor.update(LOOP_PERIOD_SECS);

        inputs.rightPositionRads = rightExtensionMotor.getAngularPositionRad();
        inputs.rightVelocityRadsPerSec = rightExtensionMotor.getAngularVelocityRadPerSec();
        inputs.rightAppliedVoltage = rightExtensionMotor.rightAppliedVoltage();
        inputs.rightSupplyCurrentAmps = rightExtensionMotor.rightSupplyCurrentAmps();

        inputs.leftPositionRads = leftExtensionMotor.getAngularPositionRad();
        inputs.leftVelocityRadsPerSec = leftExtensionMotor.getAngularVelocityRadPerSec();
        inputs.leftAppliedVoltage = leftExtensionMotor.rightAppliedVoltage();
        inputs.rightSupplyCurrentAmps = leftExtensionMotor.leftSupplyCurrentAmps();

    }

    @Override
    public void extentsionRunVoltage(){
        leftAppliedVoltage = voltage;
        leftExtensionMotor.runVoltage(voltage);

        rightAppliedVoltage= voltage
        rightExtensionMotor.runVoltage(voltage);
    }

}